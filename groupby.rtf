{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 GROUP BY and Aggregate functions\
Definition: GROUP BY allow us to aggregate data and apply functions to better understand how data is distributed per category\
\
================\
Aggregate Functions\
================\
main idea: take multiple inputs and return a single output\
being called	>>	SELECT clause	\
			>>	HAVING clause\
\
AVG()\
	** return floating point value with many decimal places\
	** using ROUND(value, decimal number) to specify precision after decimal\
COUNT()\
	** return the number of rows\
MAX()\
	** return single value which is min\
MIN()\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	** return single value which is max\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 SUM()\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	** return single value which is sum all data in the specific column\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	\
	example:\
		SELECT MIN(replacement_cost) FROM film\
		SELECT MAX(replacement_cost) FROM film\
		SELECT MIN(replacement_cost), MAX(replacement_cost) FROM film\
		SELECT ROUND(AVG(replacement_cost), 2) FROM film\
\
=========\
GROUP BY\
=========\
syntax:\
	SELECT category_col, AGG(data_col)\
	FROM table\
	GROUP BY category_col\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	SELECT category_col, AGG(data_col)\
	FROM table\
	WHERE category_col != \'91A\'92\
	GROUP BY category_col\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 		** appear after FROM or WHERE statement\
		** SELECT statement will include AGG()\
		** category_col1, category_col2, \'85 ALWAYS be in GROUP BY statement\
	\
	example:\
		SELECT company, SUM(sale)\
		FROM finance_table\
		GROUP BY company\
		ORDER BY SUM(sales) ASC\
\
EXTRA DATE function using for date with time stamp to ELIMINATE time stamp\
	example:\
		SELECT DATE(payment_date), SUM(amount) FROM payment\
		GROUP BY DATE(payment_date)\
		ORDER BY SUM(amount) ASC\
\
=======\
HAVING\
=======\
** filter after an AGG()\
** happen after GROUP BY\
syntax:\
\
\
example:\
	SELECT company, SUM(sales)\
	FROM finance_table\
	WHERE company != \'91Google\'92\
	GROUP BY company\
\
	SELECT company, SUM(sales)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	FROM finance_table\
	WHERE company != \'91Google\'92\
	GROUP BY company\
	HAVING SUM(sales) > 1000}